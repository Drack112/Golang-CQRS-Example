// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IConsumer is an autogenerated mock type for the IConsumer type
type IConsumer[T interface{}] struct {
	mock.Mock
}

// ConsumeMessage provides a mock function with given fields: msg, dependencies
func (_m *IConsumer[T]) ConsumeMessage(msg interface{}, dependencies T) error {
	ret := _m.Called(msg, dependencies)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, T) error); ok {
		r0 = rf(msg, dependencies)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsConsumed provides a mock function with given fields: msg
func (_m *IConsumer[T]) IsConsumed(msg interface{}) bool {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for IsConsumed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewIConsumer creates a new instance of IConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIConsumer[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *IConsumer[T] {
	mock := &IConsumer[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
